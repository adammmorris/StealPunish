package edu.brown.cs.commands.model2.gm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;


import edu.brown.cs.behavior.irl.IRL;
import edu.brown.cs.behavior.irl.IRLPlannerFactory;
import edu.brown.cs.behavior.irl.IRL.TaskCondition;
import edu.brown.cs.commands.model2.gm.TAModule.ConjunctiveGroundedPropRF;
import edu.brown.cs.commands.model2.gm.TAModule.RFConVariableValue;
import edu.brown.cs.generativemodel.GMModule;
import edu.brown.cs.generativemodel.GMQuery;
import edu.brown.cs.generativemodel.GMQueryResult;
import edu.brown.cs.generativemodel.ModelTrackedVarIterator;
import edu.brown.cs.generativemodel.RVariable;
import edu.brown.cs.generativemodel.RVariableValue;
import edu.umbc.cs.maple.commands.data.Trajectory;
import edu.umbc.cs.maple.oomdp.Domain;
import edu.umbc.cs.maple.oomdp.GroundedAction;
import edu.umbc.cs.maple.oomdp.GroundedProp;
import edu.umbc.cs.maple.oomdp.State;
import edu.umbc.cs.maple.oomdp.TerminalFunction;

public class IRLModule extends GMModule {

	public static final String								BNAME = "behavior";
	
	
	protected RVariable										stateRV;
	protected RVariable										rewardRV;
	protected RVariable										behaviorRV;
	
	protected Domain										oomdpDomain;
	protected IRL											irl;
	
	protected boolean										useIRLCache;
	protected Map<GMQuery, Double>							cachedResults;
	
	
	public IRLModule(String name, RVariable stateRV, RVariable rewardRV, Domain oomdpDomain, IRLPlannerFactory irlPlanFactory, boolean useTerminateAction, boolean useCache) {
		super(name);
		
		this.stateRV = stateRV;
		this.rewardRV = rewardRV;
		
		this.externalDependencyList.add(stateRV);
		this.externalDependencyList.add(rewardRV);
		
		
		behaviorRV = new RVariable(BNAME, this);
		behaviorRV.addDependency(rewardRV);
		behaviorRV.addDependency(stateRV);
		
		
		this.oomdpDomain = oomdpDomain;
		this.useIRLCache = useCache;
		
		this.irl = new IRL(oomdpDomain, irlPlanFactory, useTerminateAction);
		this.irl.setTemperature(0.005);
		
		
		cachedResults = new HashMap<GMQuery, Double>();
		
		
	}

	@Override
	public GMQueryResult computeProb(GMQuery query) {
		
		BehaviorValue bval = (BehaviorValue)query.getSingleQueryVar();
		
		Set <RVariableValue> conditions = query.getConditionValues();
		RFConVariableValue rval = (RFConVariableValue)this.extractValueForVariableFromConditions(rewardRV, conditions);
		
		double p;
		
		Double cachedP = this.cachedResults.get(query);
		if(cachedP != null){
			p = cachedP;
		}
		else{
			ConjunctiveGroundedPropTF tf = new ConjunctiveGroundedPropTF(rval.rf);
			TaskCondition tc = new TaskCondition(rval.rf, tf);
			
			p = irl.getBehaviorProbability(bval.t, tc);
			
			if(this.useIRLCache){
				this.cachedResults.put(query, p);
			}
		}
		
		
		return new GMQueryResult(query, p);
	}

	@Override
	public ModelTrackedVarIterator getNonZeroProbIterator(RVariable queryVar, List<RVariableValue> conditions) {
		
		//there are a ton of different possible behaviors; so we're not implementing a method
		//to iterate them.
				
		throw new UnsupportedOperationException();
	}

	@Override
	public Iterator<RVariableValue> getRVariableValuesFor(RVariable queryVar) {
		
		//there are a ton of different possible behaviors; so we're not implementing a method
		//to iterate them.
		
		throw new UnsupportedOperationException();
		
		
	}
	
	
	
	
	
	
	
	public static class BehaviorValue extends RVariableValue{

		public Trajectory		t;
		
		public BehaviorValue(Trajectory t, RVariable owner){
			
			this.t = t;
			
			this.setOwner(owner);
		}
		
		@Override
		public boolean valueEquals(RVariableValue other) {
			
			if(this == other){
				return true;
			}
			
			if(!(other instanceof BehaviorValue)){
				return false;
			}
			
			BehaviorValue that = (BehaviorValue)other;
			
			if(this.t.numStates() != that.t.numStates()){
				return false;
			}
			
			for(int i = 0; i < this.t.numStates(); i++){
				State s = this.t.getState(i);
				State ts = that.t.getState(i);
				if(!s.equals(ts)){
					return false;
				}
				
				if(i < this.t.numStates()-1){
					GroundedAction ga = this.t.getAction(i);
					GroundedAction tga = that.t.getAction(i);
					
					if(!ga.equals(tga)){
						return false;
					}
					
				}
				
			}
			
			
			return true;
		}

		@Override
		public String stringRep() {
			
			StringBuffer buf = new StringBuffer();
			
			for(int i = 0; i < this.t.numStates(); i++){
				buf.append(t.getState(i).getCompleteStateDescription()).append("\n");
				if(i < this.t.numStates()-1){
					buf.append(t.getAction(i).toString()).append("\n");
				}
			}
			
			
			return buf.toString();
		}
		
		
		
		
	}
	
	
	
	
	public class ConjunctiveGroundedPropTF extends TerminalFunction{
		
		public List <GroundedProp>			gps;

		public ConjunctiveGroundedPropTF(List <GroundedProp> gps){
			this.gps = gps;
		}
		
		public ConjunctiveGroundedPropTF(ConjunctiveGroundedPropRF rf){
			this.gps = new ArrayList<GroundedProp>(rf.gps);
		}
		
		
		@Override
		public boolean isTerminal(State s) {
			for(GroundedProp gp : gps){
				if(!gp.isTrue(s)){
					return false;
				}
			}
			
			return true;
		}
		
	}
	
	
	
	
	

}
